import { ThemeContext, ThemeModule } from '<%= importPath %>/core';
import { ThemeGlobalModule } from '<%= importPath %>/global';
import documentReady from 'document-ready';

export interface ShopifyBootstrapOptions {
  themeLayoutName: string;
  themeTemplateName: string;
  themeContext: ThemeContext;
  loadGlobal: boolean;
}

export interface ThemeModuleMapping {
  [key: string]: () => Promise<typeof ThemeModule>;
}

/**
 * This function gets added to the global window and then called
 * on page load with the current template loaded and JS Context passed in
 * @param pageType String
 * @param contextJSON
 * @returns {*}
 */
export function themeBootstrapFactory(
  registeredLayouts: ThemeModuleMapping,
  registeredTemplates: ThemeModuleMapping
): (options: ShopifyBootstrapOptions) => Promise<void> {
  return (options: ShopifyBootstrapOptions) =>
    new Promise((resolve) => {
      const {
        themeLayoutName,
        themeTemplateName,
        themeContext,
        loadGlobal = true,
      } = options;
      const context = themeContext ?? null;

      documentReady(() => {
        // Load globals
        if (loadGlobal) {
          ThemeGlobalModule.load(context);
        }

        const importPromises: Array<Promise<any>> = [];

        // Find the appropriate template loader based on themeTemplateName
        const themeLayoutImporter = registeredLayouts[themeLayoutName];
        if (typeof themeLayoutImporter === 'function') {
          importPromises.push(themeLayoutImporter());
        }

        // See if there is a page class default for a custom template
        const themeTemplateImporter = registeredTemplates[themeTemplateName];
        if (typeof themeTemplateImporter === 'function') {
          importPromises.push(themeTemplateImporter());
        }

        // Wait for imports to resolve, then call load() on them
        Promise.all(importPromises).then((moduleImports) => {
          moduleImports.forEach((module: typeof ThemeModule) => {
            module.load(context);
          });
          resolve();
        });
      });
    });
}
